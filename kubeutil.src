# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#


if ! test -f .env
then echo Please put a env with the access keys in this folder
else export $(xargs <.env)
fi

echo use init.sh to reset to kind only
echo use kctx to list and change contexts
echo use kadd to add a new context to your kubeconfig

function kctx {
    if test -z "$1"
    then kubectl config view -o json | jq '.contexts | .[].name' -r  |  awk '{print NR, $0}'
         echo current: "$(kubectl config current-context)"
         echo use "kctx <number>" to switch context
         else CTX=$(kubectl config view -o json | jq '.contexts | .[].name' -r | awk 'NR=='$1' {print}')
            kubectl config use-context "$CTX"
            kubectl get nodes
        fi
}

function kadd {
     if [[ -z "$1" ]] || ! [[ -f "$1" ]]
     then echo "required: <kubeconfig>"
     else 
          mv $HOME/.kube/config $HOME/.kube/config$$
          export KUBECONFIG="$HOME/.kube/config$$:$1"
          kubectl config view --flatten >"$HOME/.kube/config"
 	     unset KUBECONFIG
     fi
     kctx
}
function kfin {
    kubectl -n nuvolaris patch "$@"  -p '{"metadata":{"finalizers":[]}}' --type=merge
}

alias k="kubectl -n nuvolaris"
alias ka="kubectl -n nuvolaris apply -f"
alias kg="kubectl -n nuvolaris get"
alias kd="kubectl -n nuvolaris delete"
alias kds="kubectl -n nuvolaris describe"
for i in config/*.kubeconfig ; do kadd $i ; done

